/*
 * Copyright (c) 2015 Jonas Kalderstam.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.application'
// apply plugin: 'kotlin-android'

android {
    compileSdkVersion 33
    buildToolsVersion "33.0.1"
    namespace "com.nononsenseapps.notepad" // for R.*

    buildFeatures {
        // replaces part of the androidannotations library. See mBinding in java classes
        viewBinding true
    }

    lint {
        htmlReport false // TODO re-enable and fix all warnings reported in the html file
        textReport false
        abortOnError false
        explainIssues true
        checkTestSources true
        // turn off checking the given issue id's
        disable += ['RtlHardcoded', 'ApplySharedPref']
    }

    packagingOptions {
        resources {
            // excludes += ['META-INF/LICENSE.txt', 'META-INF/NOTICE.txt']
        }
    }

    // disable code shrinking in debug, enable it in release mode
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            pseudoLocalesEnabled true
            // TODO test https://developer.android.com/guide/topics/resources/pseudolocales
            // just to make gradle shut up about missing classes
            proguardFiles 'proguard.pro'
        }
        release {
            // enable R8
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard.pro'
        }
    }

    defaultConfig {
        applicationId "com.nononsenseapps.notepad"
        targetSdkVersion 33
        // most people have at least android 7.1 anyway: https://apilevels.com/
        // 90% of users are on API>=27 => don't write special code for 23<=API<=26, it's worthless
        minSdkVersion 23

        // Making either of these two values dynamic in the defaultConfig will
        // require a full app build and reinstallation, even for the smallest change.
        // If these values are fixed, incremental builds are optimized.
        // Also, f-droid prefers these values to be static => update them manually, please.
        versionCode 71000
        versionName "7.1.0"

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments disableAnalytics: 'true'
    }

    testOptions {
        // androidx espresso tests require this
        animationsDisabled true
    }

    compileOptions {
        // enable support for new language APIs in old devices
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    // kotlinOptions { jvmTarget = 11 } // compile kotlin to java 11, for compatibility

    if (project.hasProperty('STORE_FILE')) {
        buildTypes {
            release {
            }
        }
    } else {
        // println "No key store defined. Signed release not available..."
    }

    // control which types of configuration APKs you want your
    // app bundle to support
    bundle {
        language {
            // download ALL languages, because we have
            // a built-in language picker
            enableSplit = false
        }
    }
}

dependencies {
    // AndroidX
    implementation "androidx.cursoradapter:cursoradapter:1.0.0"
    implementation 'androidx.fragment:fragment:1.5.5'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation "androidx.preference:preference:1.2.0"
    implementation "androidx.startup:startup-runtime:1.1.1" // just to fix build warnings
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'com.google.android.material:material:1.7.0'
    // yes we need both. These solve a dependency problem with androidx.preference
    implementation "androidx.lifecycle:lifecycle-viewmodel:2.5.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"
    // Time library, open source & up to date
    implementation 'joda-time:joda-time:2.12.1'
    // Dashclock API, open source & abandoned, but it still works
    implementation 'com.google.android.apps.dashclock:dashclock-api:2.0.0'
    // Writes org files, open source & abandoned, but it still works
    implementation 'org.cowboyprogrammer.orgparser:orgparser:1.3.1'
    // Http library for Google Task Sync, open source & up to date
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    // for manual list sorting, local source copy, open source & abandoned
    implementation project(':external:drag-sort-listview')
    // for highlighting functionality on 1Â° launch, open source & up to date
    implementation 'com.getkeepsafe.taptargetview:taptargetview:1.13.3'
    // from deleted branch 'version6'
    implementation project(path: ':contract')
    // for ListenableFuture<>
    implementation 'com.google.guava:guava:31.1-android'
    // annotations library, open source & abandoned
    annotationProcessor "org.androidannotations:androidannotations:4.8.0"
    implementation "org.androidannotations:androidannotations-api:4.8.0"
    // Tests libraries
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.5.0'
    androidTestImplementation "androidx.test.espresso:espresso-intents:3.5.0"
    androidTestUtil "androidx.test.services:test-services:1.4.2"
    // Desugaring library, needs android gradle plugin v7.4+ to upgrade
    //noinspection GradleDependency
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.2.2'
    // no kotlin
    // implementation "org.jetbrains.kotlin:kotlin-stdlib:1.7.20"
}

// run with: ./gradlew checkLanguages
task checkLanguages {

    // TODO Feeder has a better version of this, but you need to change the locales code. See:
    //  https://gitlab.com/spacecowboy/Feeder/-/blob/master/app/build.gradle.kts#L344

    group 'NoNonsenseNotes custom tasks'
    description 'Ensure all languages in res/values-*/strings.xml are selectable in the spinner'

    var readFromFolders = () -> {
        // Read res/values/ folders, add their codes to localesInFolders
        File resDir = new File(projectDir, "src/main/res")
        FileFilter theFilter = (file) -> file.name.toLowerCase().startsWith("values")
        File[] dirs = resDir.listFiles(theFilter)

        var localesInFolders = new ArrayList<String>()
        for (File valueFolder : dirs) {
            // exclude folders like 'values-600dp' which don't represent languages
            if (valueFolder.name.contains("0dp")) continue
            if (valueFolder.name.contains("values-land")) continue

            String localeCode = valueFolder.name.replace("values-", "")
            localesInFolders.add(localeCode)
        }
        return localesInFolders
    }

    var readFromXML = () -> {
        // read the language list in arrays.xml
        File arrFile = new File(projectDir, "src/main/res/values/arrays.xml")
        var reader = new FileReader(arrFile.absolutePath)
        String xmlText = reader.text
        reader.close()

        // locate where the "translated_langs" array is
        int posBegin = xmlText.indexOf("<string-array name=\"translated_langs\" tools:ignore=\"MissingTranslation\">")
        int posEnd = xmlText.indexOf("</string-array>", posBegin)
        String onlyLangArray = xmlText.substring(posBegin, posEnd)

        // add locale codes to localesInXML
        var localesInXML = new ArrayList<String>()
        for (String line : onlyLangArray.split('\n')) {
            if (!line.contains("<item>")) continue

            String localeCode = line.replace("<item>", "").replace("</item>", "")
            localesInXML.add(localeCode)
        }

        return localesInXML
    }

    doLast {
        // actually run the task
        var listDir = readFromFolders()
        var listXML = readFromXML()
        if (listDir.size != listXML.size) {
            String errMsg = "Outdated translation: XML element has " + listXML.size
            errMsg += " locales, but the values-* folders are " + listDir.size
            throw new GradleException(errMsg)
        }
    }
}